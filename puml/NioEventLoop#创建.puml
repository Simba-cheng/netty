@startuml participant

Actor -> NioEventLoopGroup: \n\n 1. new NioEventLoopGroup(); \n    创建 NioEventLoopGroup 对象

NioEventLoopGroup -> NioEventLoopGroup: \n 2. 调用重载构造器
note right
2#
↓ NioEventLoopGroup()
↓ NioEventLoopGroup(int)
↓ NioEventLoopGroup(int, java.util.concurrent.Executor)
↓ NioEventLoopGroup(int, Executor, SelectorProvider)
↓ NioEventLoopGroup(int, Executor, SelectorProvider, SelectStrategyFactory)
end note

NioEventLoopGroup -> MultithreadEventLoopGroup: \n\n 3. super 向上调用父类构造器 \n     MultithreadEventLoopGroup(int, Executor, Object...)

MultithreadEventLoopGroup -> MultithreadEventExecutorGroup: \n\n 4. super 向上调用父类构造器 \n     MultithreadEventExecutorGroup(int, Executor, Object...)

MultithreadEventExecutorGroup -> MultithreadEventExecutorGroup: \n\n 5. 调用重载构造器 \n     MultithreadEventExecutorGroup(int, Executor, EventExecutorChooserFactory, Object...)

group <color:#836FFF>5# MultithreadEventExecutorGroup 构造器中的逻辑</color>

    MultithreadEventExecutorGroup -> MultithreadEventExecutorGroup: \n\n ① 创建线程池
    note left
    ①#
    使用 NioEventLoopGroup 默认构造器，
    没有指定线程池，那么此处线程池是: ThreadPerTaskExecutor
    end note

    MultithreadEventExecutorGroup -> MultithreadEventExecutorGroup: \n\n\n ② 创建 eventLoop 数组,根据 nThreads
    note left
    ②#
    使用 NioEventLoopGroup 默认构造器，那么 nThreads 是 CPU*2。
    end note

    loop <color:#FF4500>for (int i = 0; i < nThreads; i ++) ; 依据 nThreads 数量,创建 EventLoop</color>

    skinparam sequenceMessageAlign left
    MultithreadEventExecutorGroup -> NioEventLoopGroup: \n\n\n ②.1 newChild \n     newChild 是定义在 MultithreadEventExecutorGroup 中的抽象方法,NioEventLoopGroup 中进行了实现

    skinparam sequenceMessageAlign left
    NioEventLoopGroup -> NioEventLoop: \n\n\n  ②.2 创建 NioEventLoop \n      new NioEventLoop(this, executor, selectorProvider, selectStrategyFactory.newSelectStrategy(),rejectedExecutionHandler, taskQueueFactory, tailTaskQueueFactory);
'        note right
'        ④#

'        end note
        group <color:#836FFF>④ 创建 NioEventLoop</color>

        NioEventLoop -> NioEventLoop: \n\n 1) newTaskQueue 初始化任务队列 \n      默认是 MpscChunkedArrayQueue 类型的队列,长度16

        NioEventLoop -> SingleThreadEventLoop: \n\n 2) super 向上调用父类构造器 \n SingleThreadEventLoop(EventLoopGroup, Executor, boolean,Queue<Runnable>, Queue<Runnable>, RejectedExecutionHandler)

        SingleThreadEventLoop -> SingleThreadEventExecutor: \n\n 2.1) super 向上调用父类构造器 \n SingleThreadEventExecutor(EventExecutorGroup, Executor, boolean, Queue<Runnable>, RejectedExecutionHandler)

        SingleThreadEventExecutor -> SingleThreadEventExecutor: \n\n 2.1.1) 设置执行任务的线程池

        SingleThreadEventExecutor -> SingleThreadEventExecutor: \n\n 2.1.2) 设置 taskQueue

        SingleThreadEventExecutor -> SingleThreadEventExecutor: \n\n 2.1.3) 设置其他参数

        SingleThreadEventExecutor [#EE7621]--> NioEventLoop: \n\n

        NioEventLoop -> NioEventLoop: \n\n 3) 创建 selector

        NioEventLoop -> NioEventLoop: \n\n 4) 设置其他参数

        end

        NioEventLoop [#EE7621]--> NioEventLoopGroup: \n\n

    end

    NioEventLoopGroup -> NioEventLoopGroup: \n\n ③ 设置选择器

    NioEventLoopGroup -> NioEventLoopGroup: \n\n ④ 其他逻辑略

end

Actor <--[#EE7621] NioEventLoopGroup
@enduml